There are few things as satisfying as building games. If nothing else, Flecs has been built to enable creative visions both big and small. I'm having a lot of fun building Flecs, I hope you will have fun using it, and that your users will have fun playing your games :)
## Component remove flow
## Naming conventions
// Component names ('Position') use PascalCase
typedef struct Position {
float x;
float y; // Component members ('y') use snake_case
} Position;
ECS_COMPONENT(world, Position);
// Module names are PascalCase
ECS_SYSTEM(world, Move, EcsOnUpdate, Position, Velocity);
// Function wrapper macros use snake_case
The C99 API heavily relies on function-style macros, probably more than you would see in other libraries. The number one reason for this is that an ECS framework needs to work with user-defined types, and C does not provide out of the box support for generics. A few strategies have been employed in the API to improve its overall ergonomics, type safety and readability. Let's start with a simple example:
typedef struct Position {
float x;
float y;
} Position;
ECS_COMPONENT(world, Position);
ecs_entity_t e = ecs_new(world, Position);
From a readability perspective this code looks fine as we can easily tell what is happening here. Though if we take a closer look, we can see that a typename is used where we expect an expression, and that is not possible in plain C. So what is going on?
Let's first remove the ECS_COMPONENT macro and replace it with equivalent code (details are omitted for brevity):
ecs_entity_t ecs_id(Position) = ecs_component_init(world, &(ecs_component_desc_t){
.entity.name = "Position",
.size = sizeof(Position),
.alignment = ECS_ALIGNOF(Position)
});
ecs_component_initecs_entity_t ecs_component_init(ecs_world_t *world, const ecs_component_desc_t *desc)Find or create a component.
ecs_component_desc_tUsed with ecs_component_init.Definition: flecs.h:835
The first line actually registers the component with Flecs, and captures its name and size. The result is stored in a variable with name ecs_id(Position). Here, ecs_id is a macro that translates the typename of the component to a variable name. The actual name of the variable is:
FLECS__EPosition
ECS operations that accept a typename, such as ecs_get will look for the FLECS__E variable: Position *p = ecs_get(world, e, Position);
Translates into:
Position *p = (Position*)ecs_get_id(world, e, ecs_id(Position));
ecs_get_idconst void * ecs_get_id(const ecs_world_t *world, ecs_entity_t entity, ecs_id_t id)Get an immutable pointer to a component.
As you can see, the ecs_get macro casts the result of the function to the correct type, so a compiler will throw a warning when an application tries to assign the result of the operation to a variable of the wrong type.
Similarly, ecs_set is a macro that ensures that anything we pass into it is of the right type:
ecs_set(world, e, Position, {10, 20});
Translates into:
ecs_set_id
(world, e, ecs_id(Position), sizeof(Position),
&(Position){10, 20});
ecs_set_idecs_entity_t ecs_set_id(ecs_world_t *world, ecs_entity_t entity, ecs_id_t id, size_t size, const void *ptr)Set the value of a component.
# Entities
# Entities are uniquely identifiable objects in a game or simulation. In a real time strategy game, there may be entities for the different units, buildings, UI elements and particle effects, but also for example the camera, world and player. An entity does not contain any state, and is not of a particular type. In a traditional OOP-based game, you may expect a tank in the game is of class "Tank". In ECS, an entity is simply a unique identifier, and any data and behavior associated with that entity is implemented with components and systems.
In Flecs, an entity is represented by a 64 bit integer, which is also how it is exposed on the API:
ecs_set_entity_range(world, 5000, 0);
ecs_set_entity_rangevoid ecs_set_entity_range(ecs_world_t *world, ecs_entity_t id_start, ecs_entity_t id_end)Set a range for issueing new entity ids.
ecs_entity_t e = ecs_new(world, Position);
// Add Velocity to the entity
ecs_add(world, e, Velocity);
ecs_world_t *world = ecs_init();
// Register the component with the world
ECS_COMPONENT(world, Position);
// Create a new entity with the component
ecs_entity_t e = ecs_new(world, Position);
// Remove the component from the entity
ecs_remove(world, e, Position);
// Add the component again
ecs_add(world, e, Position);
}
Component values can be set with the ecs_set operation. If the entity did not yet have the component, it will be added:
ecs_set(world, e, Position, {10, 20});
Applications can get the value of a component with the ecs_get function:
The value of a component can be requested with ecs_get, which will return NULL if the entity does not have the component:
const Position *p = ecs_get(world, e, Position);
The ecs_get operation returns a const pointer which should not be modified by the application. An application can obtain a mutable pointer with ecs_get_mut. The ecs_get_mut operation ensures that, even when using multiple threads, an application obtains a pointer to a component that can be safely modified, whereas the ecs_get operation might return a pointer to memory that is shared between threads. When an application modified a component obtained with ecs_get_mut, it should invoke ecs_modified to let the framework know the component value was changed. An example:
Position *p = ecs_get_mut(world, e, Position);
p->x++;
ecs_modified(world, e, Position);
## Component handles
## Component disabling works by maintaining a bitset alongside the component array. When a component is enabled or disabled, the bit that corresponds with the entity is set to 1 or 0. Bitsets are not created by default. Only after invoking the ecs_enable_component operation for an entity will be entity be moved to a table that keeps track of a bitset for that component.
When a query is matched with a table that has a bitset for a component, it will automatically use the bitset to skip disabled values. If an entity contains multiple components tracked by a bitset, the query will evaluate each bitset and only yield entities for which all components are enabled. To ensure optimal performance, the query will always return the largest range of enabled components. Nonetheless, iterating a table with a bitset is slower than a regular table.
If a query is matched with a table that has one or more bitsets, but the query does not match with components tracked by a bitset, there is no performance penalty.
## Component disabling can be used to temporarily suspend and resume a component value. It can also be used as a faster alternative to ecs_add/ecs_remove. Since the operation only needs to set a bit, it is a significantly faster alternative to adding/removing components, at the cost of a slightly slower iteration speed. If a component needs to be added or removed frequently, enabling/disabling is recommended.
### Limitations
## Component disabling does not work for components not matched with the entity. If a query matches with a component from a base (prefab) or parent entity and the component is disabled for that entity, the query will not take this into account. If entities with disabled components from a base or parent entity need to be skipped. a query should manually check this.
Because component disabling is implemented with a type role, it cannot be used together with other type roles. This means that it is not possible to disable, for example, tags with SWITCH or CASE roles. Additionally since relationships rely on a role, it is currently not possible to disable relationships such as (ChildOf, parent) or (IsA, prefab).
# Tagging
/* # Components are declared with ECS_COMPONENT_DECLARE */
extern ECS_COMPONENT_DECLARE(Car);
extern ECS_COMPONENT_DECLARE(Bus);
extern ECS_COMPONENT_DECLARE(MotorCycle);
/* Tags are declared with ECS_DECLARE */
extern ECS_DECLARE(Moving);
/* Systems are declared with ECS_SYSTEM_DECLARE */
extern ECS_SYSTEM_DECLARE(Move);
/* Forward declaration to the import function */
/* The function name has to follow the convention: <ModuleName>Import */
void VehiclesImport(ecs_world_t *world);
ECS_SYSTEM_DECLARE#define ECS_SYSTEM_DECLARE(id)Forward declare a system.Definition: system.h:104
The import function for this module is typically located in a module source file, and would look like this:
void VehiclesImport(ecs_world_t *world) {
/* Define the module */
ECS_MODULE(world, Vehicles);
/* Declare components, tags, systems, and assign them to the module with their respective _DEFINE macros */
ECS_COMPONENT_DEFINE(world, Car);
ECS_COMPONENT_DEFINE(world, Bus);
ECS_COMPONENT_DEFINE(world, MotorCycle);
ECS_TAG_DEFINE(world, Moving);
ECS_SYSTEM_DEFINE(world, Move, EcsOnUpdate, Car, Moving);
}
ECS_SYSTEM_DEFINE#define ECS_SYSTEM_DEFINE(world, id_, phase,...)Define a forward declared system.Definition: system.h:111
ECS_TAG_DEFINE#define ECS_TAG_DEFINE(world, id)Define a forward declared tag.Definition: flecs_c.h:66
After the module has been defined, it can be imported in an application like this:
ecs_world_t *world = ecs_init();
/* Import module, which invokes the module import function */
ECS_IMPORT(world, Vehicles);
/* The module contents can now be used */
ecs_entity_t e = ecs_new(world, Car);
flecs::world world;
flecs::import<vehicles>(world);
# Hierarchies
This does two things. First, it will iterate over all entities that have Position and that optionally have a parent that has Position. By making the parent component optional, it is ensured that if an application is iterating a tree of entities, the root is also included. Secondly, the query iterates over the children in breadth-first order. This is particularly useful when writing transform systems, as they require parent entities to be transformed before child entities.
The above query does not match root entities, as they do not have a parent with Position. To also match root entities, add ? to make the term optional:
ecs_query_t *q = ecs_query_new(world, "?Position(parent|cascade), Position");
See the query manual section for more details.
## Path identifiers
When entities in a hierarchy have names assigned to them, they can be looked up with path expressions. A path expression is a list of entity names, separated by a scope separator character (by default a ., and :: in the C++ API). This example shows how to request the path expression from an entity:
ECS_ENTITY(world, parent, 0);
ECS_ENTITY(world, child, (ChildOf, parent));
char *path = ecs_get_fullpath(world, child);
printf("%s\n", path); // Prints  "parent.child"
free(path);
To lookup an entity using a path, use ecs_lookup_fullpath:
ecs_entity_t e = ecs_lookup_fullpath(world, "parent.child");
Applications can also lookup entities using a relative path expression:
ecs_entity_t e = ecs_lookup_path(world, parent, "child.grand_child");
Additionally, applications can specify a custom path separator when looking up or requesting paths:
// Lookup child::grand_child relative to parent
ecs_entity_t e = ecs_lookup_path_w_sep(
world, parent, "child::grand_child", "::", "::");
// Get path of child relative to parent
char *path = ecs_get_path_w_sep(world, parent, child, "::", "::");
ecs_get_path_w_sepchar * ecs_get_path_w_sep(const ecs_world_t *world, ecs_entity_t parent, ecs_entity_t child, const char *sep, const char *prefix)Get a path identifier for an entity.
ecs_lookup_path_w_sepecs_entity_t ecs_lookup_path_w_sep(const ecs_world_t *world, ecs_entity_t parent, const char *path, const char *sep, const char *prefix, bool recursive)Lookup an entity from a path.
Note that the path separator is provided twice, once for the prefix and once for the separator. This lets the API correctly handle expressions like ::parent::child::grand_child.
## Scoping
Applications can set a default scope with the ecs_set_scope function, so that all operations are evaluated relative to a scope. The scope is set on a stage, which makes it thread safe when executed from within a flecs worker thread. This example shows how to set the scope:
ecs_entity_t parent = ecs_new(world, 0);
// Set the current scope to the parent
ecs_entity_t prev_scope = ecs_set_scope(world, parent);
// This entity is created as child of parent
ecs_entity_t child = ecs_new(world, 0);
// Look for "child" relative to parent
ecs_entity_t e = ecs_lookup_fullpath(world, "child");
// It's good practice to restore the previous scope
ecs_set_scope(prev_scope);
ecs_set_scopeecs_entity_t ecs_set_scope(ecs_world_t *world, ecs_entity_t scope)Set the current scope.
IsA relationships can be nested:
ecs_entity_t base = ecs_new(world, 0);
ecs_set(world, base, Position, {10, 20});
ecs_entity_t derived = ecs_new_w_pair(world, EcsIsA, base);
// Derive from "derived" which is itself derived from base
ecs_entity_t e = ecs_new_w_pair(world, EcsIsA, derived);
ecs_get(world, base, Position) == ecs_get(world, e, Position); // 1
ecs_get(world, base, Position) == ecs_get(world, derived, Position);  // 1
## Overriding
// Shortcut for creating a base entity and setting Position
ecs_entity_t base = ecs_set(world, 0, Position, {10, 20});
// Derive from the base
ecs_entity_t e = ecs_new_w_pair(world, EcsIsA, base);
// Override Position
ecs_add(world, e, Position);
// Position component no longer matches with base
ecs_get(world, base, Position) != ecs_get(world, e, Position); // 1
// Prints {10, 20}
const Position *p = ecs_get(world, e, Position);
printf("{%f, %f}\n", p->x, p->y);
When an entity shared a component from a base entity, we say that the component is "shared". If the component is not shared, it is "owned". After an entity overrides a component, it will own the component.
It is possible to remove an override, in which case the component will be shared with the base entity again:
// Removes override on Position
ecs_remove(world, e, Position);
## Prefabs
## Prefabs are entities that can be used as templates for other entities. ## Prefabs are regular entities, except that they are not matched by default with systems. To create a prefab, add the EcsPrefab tag when creating an entity:
ecs_entity_t prefab = ecs_new_w_id(world, EcsPrefab);
EcsPrefabconst ecs_entity_t EcsPrefabTag added to prefab entities.
The EcsPrefab tag can also be added or removed dynamically:
ecs_add_id(world, prefab, EcsPrefab);
ecs_remove_id(world, prefab, EcsPrefab);
## Prefabs can also be created with the ECS_PREFAB macro:
ECS_PREFAB(world, prefab, Position, Velocity);
ECS_PREFAB#define ECS_PREFAB(world, id,...)Declare & define a prefab.Definition: flecs_c.h:90
To instantiate a prefab, an application can use the IsA relationship:
ecs_entity_t e = ecs_new_w_pair(world, (IsA, prefab));
To ensure that entities that inherit from a prefab don't also inherit the Prefab tag (which would cause them to not get matched with systems), the Prefab tag does not propagate to derived entities. This is illustrated in the following example:
ECS_PREFAB(world, prefab, Position);
ecs_has(world, prefab, EcsPrefab); // true
ecs_has(world, prefab, Position); // true
ecs_entity_t e = ecs_new_w_pair(world, (IsA, prefab));
ecs_has(world, e, EcsPrefab); // false
ecs_has(world, e, Position); // true
# Deferred operations
Applications can defer entity with the ecs_defer_begin and ecs_defer_end functions. This records all operations that happen inside the begin - end block, and executes them when ecs_defer_end is called. # Deferred operations are useful when an application wants to make modifications to an entity while iterating, as doing this without deferring an operation could modify the underlying data structure. An example:
ecs_defer_begin(world);
ecs_entity_t e = ecs_new(world, 0);
ecs_add(world, e, Position);
ecs_set(world, e, Velocity, {1, 1});
ecs_defer_end(world);
ecs_defer_endbool ecs_defer_end(ecs_world_t *world)End block of operations to defer.
ecs_defer_beginbool ecs_defer_begin(ecs_world_t *world)Defer operations until end of frame.
The effects of these operations will not be visible until the ecs_defer_end operation.
There are a few things to keep in mind when deferring:
creating a new entity will always return a new id which increases the last used id counter of the world
ecs_get_mut returns a pointer initialized with the current component value, and does not take into account deferred set or get_mut operations
if an operation is called on an entity which was deleted while deferred, the operation will ignored by ecs_defer_end
if a child entity is created for a deleted parent while deferred, the child entity will be deleted by ecs_defer_end